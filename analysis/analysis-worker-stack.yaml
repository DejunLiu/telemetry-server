AWSTemplateFormatVersion: '2010-09-09'

Description: >
  CloudFormation template for telemetry-analysis worker setup, this stack
  outputs a queue to which analysis tasks can be submitted. Pool of spot workers
  will automatically scale to do the work.

################################################################################

Parameters:

  instanceType:
    Description:              Worker instance type
    Type:                     String
    Default:                  m1.xlarge
    AllowedValues:
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - c1.medium
      - c1.xlarge
    ConstraintDescription:    must be a valid EC2 instance type.

  #REMARK: We should consider removing keyName as it shouldn't be possible to
  #        ssh in to the worker instances
  keyName:
    Description:              Name of key pair for SSH
    Type:                     String
    Default:                  jonasfj

  spotPrice:
    Description:              Spot price for workers
    Type:                     String
    Default:                  0.1

  sourcesBucket:
    Description:              Bucket containing sources and templates
    Type:                     String
    Default:                  jonasfj-telemetry-code

  sourcesVersion:
    Description:              Version of sources to load from sources bucket
    Type:                     String
    Default:                  '1'

################################################################################

Mappings:

  # A map from region to 64 bit Ubuntu 13.04 backed by instance storage
  # We use instance storage to avoid stability issues with EBS also we don't
  # have to pay for IO. We'll initialize these with CloudInit, later.
  # See: http://cloud-images.ubuntu.com/locator/ec2/
  regionToAMI:
    ap-northeast-1:           {AMI: ami-7f41da7e}
    ap-southeast-1:           {AMI: ami-3af8b268}
    ap-southeast-2:           {AMI: ami-a5960a9f}
    eu-west-1:                {AMI: ami-2adc3c5d}
    sa-east-1:                {AMI: ami-f1dd7bec}
    us-east-1:                {AMI: ami-3d257954}
    us-west-1:                {AMI: ami-20e5d265}
    us-west-2:                {AMI: ami-2460f914}


################################################################################

Resources:

  # Input queue to which analysis tasks should be posted
  telemetryAnalysisInput:
    Type:                               AWS::SQS::Queue
    Properties:
      DelaySeconds:                     15
      MessageRetentionPeriod:           345600
      ReceiveMessageWaitTimeSeconds:    20
      VisibilityTimeout:                1800

  # Security group for workers, this should only allow for access to SQS and S3
  workerSecurityGroup:
    Type:                     AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:       telemetry-analysis worker security group
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0}

  # IAM role for analysis workers
  workerIAMRole:
    Type:                     AWS::IAM::Role
    DependsOn:
      - telemetryAnalysisInput
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect:           Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path:                   /telemetry/analysis/
      Policies:
        # Grant access to analysis-worker tarball in sourcesBucket
        - PolicyName:         workerSourcesBucketAccessPolicy
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 's3:GetObject'
                Resource:     {"Fn::Join": ["", [
                                'arn:aws:s3:::',
                                {Ref: sourcesBucket},
                                /v,
                                {Ref: sourcesVersion},
                                /analysis-worker.tar.gz
                              ]]}
        # Grant read access to telemetry-published-v1
        - PolicyName:         telemetryPublishedAccess
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::telemetry-published-v1/*'
        - PolicyName:         inputQueueAccess
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 'sqs:*'
                Resource:
                  - {'Fn::GetAtt': [telemetryAnalysisInput, Arn]}
        - PolicyName:         analysisBucketAccess
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 's3:*'
                Resource:
                  - 'arn:aws:s3:::telemetry-published-v1'
                  - 'arn:aws:s3:::telemetry-published-v1/*'

  # IAM instance profile granting workerIAMRole to workers
  workerInstanceProfile:
    Type:                     AWS::IAM::InstanceProfile
    DependsOn:
      - workerIAMRole
    Properties:
      Path:                   /telemetry/analysis/
      Roles:
        - {Ref: workerIAMRole}

  # Security group for service server, http and ssh (well, disable ssh later)
  workerSecurityGroup:
    Type:                     AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:       telemetry-analysis worker security group
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0}

  # Worker launch configuration, decides how a worker is launched.
  workerLaunchConfig:
    Type:                     AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - workerInstanceProfile
      - telemetryAnalysisInput
      - workerSecurityGroup
    Metadata:
      Comment:                telemetry-analysis worker
    Properties:
      KeyName:                  {Ref: keyName}
      #SpotPrice:                {Ref: spotPrice}
      ImageId:                  {'Fn::FindInMap': [
                                    'regionToAMI',
                                    {Ref: 'AWS::Region'},
                                    'AMI'
                                ]}
      InstanceType:             {Ref: instanceType}
      IamInstanceProfile:       {Ref: workerInstanceProfile}
      SecurityGroups:
        - {Ref: workerSecurityGroup}
      UserData:       {'Fn::Base64': {'Fn::Join': ['', [
              "#!/bin/bash\n",
              "sudo apt-get -y install python-pip\n",
              "sudo pip install --upgrade boto\n",
              "cd /home/ubuntu\n",
              "python - << END\n",
              "from boto.s3 import connect_to_region\n",
              "s3 = connect_to_region('", {Ref: 'AWS::Region'} ,"')\n",
              "b = s3.get_bucket('", {Ref: sourcesBucket}, "', validate = False)\n",
              "k = b.get_key('v", {Ref: sourcesVersion}, "/analysis-worker.tar.gz')\n",
              "k.get_contents_to_filename('sources.tar.gz')\n",
              "END\n",
              "tar -xzf sources.tar.gz\n",
              "mkdir -p /mnt/work/\n",
              "chown ubuntu /mnt/work/\n",
              "sudo -u ubuntu python  -q '",
                {'Fn::GetAtt': [telemetryAnalysisInput, QueueName]},
                "' -w /mnt/work/\n"
            ]
          ]
        }
      }

  # Auto scaling group for workers, this entity is modified by worker scaling
  # polices, the scaling policies are activated by CloudWatch alarms.
  workerAutoScaleGroup:
    Type:                       AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - workerLaunchConfig
    Properties:
      AvailabilityZones:        {'Fn::GetAZs': ''}
      LaunchConfigurationName:  {Ref: workerLaunchConfig}
      MinSize:                  1
      MaxSize:                  1

  # Scaling policies, these are sort of actions that can be executed by a
  # CloudWatch alarm
  workerScaleUpPolicy:
    Type:                       AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - workerAutoScaleGroup
    Properties:
      AdjustmentType:           ChangeInCapacity
      AutoScalingGroupName:     {Ref: workerAutoScaleGroup}
      Cooldown:                 60
      ScalingAdjustment:        1

  workerQuickStartPolicy:
    Type:                       AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - workerAutoScaleGroup
    Properties:
      AdjustmentType:           ChangeInCapacity
      AutoScalingGroupName:     {Ref: workerAutoScaleGroup}
      Cooldown:                 60
      ScalingAdjustment:        10

  workerScaleDownPolicy:
    Type:                       AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - workerAutoScaleGroup
    Properties:
      AdjustmentType:           ChangeInCapacity
      AutoScalingGroupName:     {Ref: workerAutoScaleGroup}
      Cooldown:                 60
      ScalingAdjustment:        -1

  workerQuickKillPolicy:
    Type:                       AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - workerAutoScaleGroup
    Properties:
      AdjustmentType:           ChangeInCapacity
      AutoScalingGroupName:     {Ref: workerAutoScaleGroup}
      Cooldown:                 60
      ScalingAdjustment:        -10

  # CloudWatch alarms, these execute scaling policies
  manyMessagesAddedAlarm:
    Type:                       AWS::CloudWatch::Alarm
    DependsOn:
      - telemetryAnalysisInput
      - workerQuickStartPolicy
    Properties:
      AlarmDescription:         Scale up if 100+ message are added at once
      Namespace:                AWS/SQS
      MetricName:               NumberOfMessagesSent
      Dimensions:
        - Name:     QueueName
          Value:    {'Fn::GetAtt': [telemetryAnalysisInput, QueueName]}
      Statistic:                Sum
      Period:                   60
      EvaluationPeriods:        1
      Threshold:                100
      ComparisonOperator:       GreaterThanThreshold
      AlarmActions:
        - {Ref: workerQuickStartPolicy}

  tooManyMessagesAlarm:
    Type:                       AWS::CloudWatch::Alarm
    DependsOn:
      - telemetryAnalysisInput
      - workerScaleUpPolicy
    Properties:
      AlarmDescription:         Scale up if more than 10 messages
      Namespace:                AWS/SQS
      MetricName:               ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name:     QueueName
          Value:    {'Fn::GetAtt': [telemetryAnalysisInput, QueueName]}
      Statistic:                Sum
      Period:                   60
      EvaluationPeriods:        10
      Threshold:                1
      ComparisonOperator:       GreaterThanThreshold
      AlarmActions:
        - {Ref: workerScaleUpPolicy}

  notEnoughMessagesAlarm:
    Type:                       AWS::CloudWatch::Alarm
    DependsOn:
      - telemetryAnalysisInput
      - workerScaleDownPolicy
    Properties:
      AlarmDescription:         Scale down, if not enought messages
      Namespace:                AWS/SQS
      MetricName:               NumberOfEmptyReceives
      Dimensions:
        - Name:     QueueName
          Value:    {'Fn::GetAtt': [telemetryAnalysisInput, QueueName]}
      Statistic:                Sum
      Period:                   60
      EvaluationPeriods:        10
      Threshold:                1
      ComparisonOperator:       GreaterThanThreshold
      AlarmActions:
        - {Ref: workerScaleDownPolicy}

  totalStarvationAlarm:
    Type:                       AWS::CloudWatch::Alarm
    DependsOn:
      - telemetryAnalysisInput
      - workerQuickKillPolicy
    Properties:
      AlarmDescription:         Kill lot of workers if they poll to much
      Namespace:                AWS/SQS
      MetricName:               NumberOfEmptyReceives
      Dimensions:
        - Name:     QueueName
          Value:    {'Fn::GetAtt': [telemetryAnalysisInput, QueueName]}
      Statistic:                Sum
      Period:                   900
      EvaluationPeriods:        1
      Threshold:                5000
      ComparisonOperator:       GreaterThanThreshold
      AlarmActions:
        - {Ref: workerQuickKillPolicy}

################################################################################

Outputs:

  inputQueueMame:
    Description:        SQS Queue name for input
    Value:              {'Fn::GetAtt': [telemetryAnalysisInput, QueueName]}
